//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/anthonyrey/Desktop/Interpreter1/Expr.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ExprParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAR=1, RPAR=2, NAME=3, COMMENTS=4, STRING=5, EMPTY_LIST=6, INT=7, FLOATING=8, 
		WS=9;
	public const int
		RULE_prog = 0, RULE_expr = 1, RULE_args = 2;
	public static readonly string[] ruleNames = {
		"prog", "expr", "args"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAR", "RPAR", "NAME", "COMMENTS", "STRING", "EMPTY_LIST", "INT", 
		"FLOATING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExprParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExprParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExprParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(ExprParser.LPAR, 0); }
		public ITerminalNode NAME() { return GetToken(ExprParser.NAME, 0); }
		public ITerminalNode RPAR() { return GetToken(ExprParser.RPAR, 0); }
		public ArgsContext[] args() {
			return GetRuleContexts<ArgsContext>();
		}
		public ArgsContext args(int i) {
			return GetRuleContext<ArgsContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; Match(LPAR);
			State = 9; Match(NAME);
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << NAME) | (1L << STRING) | (1L << EMPTY_LIST) | (1L << INT) | (1L << FLOATING))) != 0)) {
				{
				{
				State = 10; args();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 16; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(ExprParser.INT, 0); }
		public ITerminalNode FLOATING() { return GetToken(ExprParser.FLOATING, 0); }
		public ITerminalNode NAME() { return GetToken(ExprParser.NAME, 0); }
		public ITerminalNode STRING() { return GetToken(ExprParser.STRING, 0); }
		public ITerminalNode EMPTY_LIST() { return GetToken(ExprParser.EMPTY_LIST, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 4, RULE_args);
		try {
			State = 24;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18; Match(INT);
				}
				break;
			case FLOATING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 19; Match(FLOATING);
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 20; Match(NAME);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 21; Match(STRING);
				}
				break;
			case EMPTY_LIST:
				EnterOuterAlt(_localctx, 5);
				{
				State = 22; Match(EMPTY_LIST);
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 23; expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '\x1D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\xE', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x11', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x1B', '\n', '\x4', '\x3', '\x4', '\x2', 
		'\x2', '\x5', '\x2', '\x4', '\x6', '\x2', '\x2', '\x2', '\x1F', '\x2', 
		'\b', '\x3', '\x2', '\x2', '\x2', '\x4', '\n', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x1A', '\x3', '\x2', '\x2', '\x2', '\b', '\t', '\x5', '\x4', '\x3', 
		'\x2', '\t', '\x3', '\x3', '\x2', '\x2', '\x2', '\n', '\v', '\a', '\x3', 
		'\x2', '\x2', '\v', '\xF', '\a', '\x5', '\x2', '\x2', '\f', '\xE', '\x5', 
		'\x6', '\x4', '\x2', '\r', '\f', '\x3', '\x2', '\x2', '\x2', '\xE', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x10', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\xF', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\a', 
		'\x4', '\x2', '\x2', '\x13', '\x5', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x1B', '\a', '\t', '\x2', '\x2', '\x15', '\x1B', '\a', '\n', '\x2', '\x2', 
		'\x16', '\x1B', '\a', '\x5', '\x2', '\x2', '\x17', '\x1B', '\a', '\a', 
		'\x2', '\x2', '\x18', '\x1B', '\a', '\b', '\x2', '\x2', '\x19', '\x1B', 
		'\x5', '\x4', '\x3', '\x2', '\x1A', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x15', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\a', '\x3', '\x2', '\x2', '\x2', '\x4', '\xF', '\x1A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
