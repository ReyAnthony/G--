//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/anthonyrey/Desktop/Interpreter1/Expr.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class ExprLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAR=1, RPAR=2, FALSY=3, NAME=4, COMMENTS=5, STRING=6, INT=7, FLOATING=8, 
		WS=9;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAR", "RPAR", "FALSY", "NAME", "COMMENTS", "STRING", "INT", "FLOATING", 
		"WS"
	};


	public ExprLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExprLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'no'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAR", "RPAR", "FALSY", "NAME", "COMMENTS", "STRING", "INT", "FLOATING", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExprLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\v', 'O', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x6', '\x5', '\x1E', '\n', '\x5', '\r', '\x5', 
		'\xE', '\x5', '\x1F', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '&', '\n', '\x6', '\f', '\x6', '\xE', '\x6', ')', 
		'\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x32', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x35', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x6', '\b', ':', '\n', '\b', '\r', '\b', '\xE', '\b', ';', '\x3', 
		'\t', '\x6', '\t', '?', '\n', '\t', '\r', '\t', '\xE', '\t', '@', '\x3', 
		'\t', '\x3', '\t', '\x6', '\t', '\x45', '\n', '\t', '\r', '\t', '\xE', 
		'\t', '\x46', '\x3', '\n', '\x6', '\n', 'J', '\n', '\n', '\r', '\n', '\xE', 
		'\n', 'K', '\x3', '\n', '\x3', '\n', '\x4', '\'', '\x33', '\x2', '\v', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x3', '\x2', '\x5', '\a', 
		'\x2', '\'', '\'', ',', '\x31', '>', '@', '\x43', '\\', '\x63', '|', '\x3', 
		'\x2', '\x32', ';', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', 
		'\x2', 'U', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\x15', '\x3', '\x2', '\x2', '\x2', '\x5', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\a', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\t', '\x1D', '\x3', '\x2', '\x2', '\x2', '\v', '!', '\x3', '\x2', '\x2', 
		'\x2', '\r', '/', '\x3', '\x2', '\x2', '\x2', '\xF', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '>', '\x3', '\x2', '\x2', '\x2', '\x13', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x16', '\a', '*', '\x2', '\x2', '\x16', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\a', '+', '\x2', '\x2', 
		'\x18', '\x6', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\a', 'p', 
		'\x2', '\x2', '\x1A', '\x1B', '\a', 'q', '\x2', '\x2', '\x1B', '\b', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1E', '\t', '\x2', '\x2', '\x2', '\x1D', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\n', '\x3', '\x2', '\x2', '\x2', '!', '\"', 
		'\a', '=', '\x2', '\x2', '\"', '#', '\a', '=', '\x2', '\x2', '#', '\'', 
		'\x3', '\x2', '\x2', '\x2', '$', '&', '\v', '\x2', '\x2', '\x2', '%', 
		'$', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', 
		'\x2', '(', '*', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\a', '=', '\x2', '\x2', '+', ',', '\a', '=', 
		'\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '.', '\b', '\x6', 
		'\x2', '\x2', '.', '\f', '\x3', '\x2', '\x2', '\x2', '/', '\x33', '\a', 
		'$', '\x2', '\x2', '\x30', '\x32', '\v', '\x2', '\x2', '\x2', '\x31', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', '$', '\x2', 
		'\x2', '\x37', '\xE', '\x3', '\x2', '\x2', '\x2', '\x38', ':', '\t', '\x3', 
		'\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x10', '\x3', '\x2', '\x2', '\x2', '=', 
		'?', '\t', '\x3', '\x2', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x44', '\a', '\x30', '\x2', '\x2', '\x43', '\x45', 
		'\t', '\x3', '\x2', '\x2', '\x44', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x12', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'J', '\t', '\x4', '\x2', '\x2', 'I', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\b', '\n', '\x2', '\x2', 'N', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x2', '\x1F', '\'', '\x33', ';', '@', 
		'\x46', 'K', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
